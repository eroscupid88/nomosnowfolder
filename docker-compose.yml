version: '3.9'

services:
  axonserver:
    image: axoniq/axonserver
    hostname: axonserver
    container_name: axonserver
    volumes:
      - type: bind
        source: ./axonserver/data
        target: /data
      - type: bind
        source: ./axonserver/events
        target: /eventdata
      - type: bind
        source: ./axonserver/config
        target: /config
        read_only: true
    ports:
      - '8025:8025'
      - '8124:8124'
      - '8224:8224'
    networks:
      backend:
        aliases:
          - "axonserver"
  mongo:
    image: mongo:6-jammy
    container_name: mongo
    ports:
      - '27017:27017'
    volumes:
      - dbdata6:/data/db
    networks:
      backend:
        aliases:
          - "mongo"
  mongodbtest:
    image: mongo:latest
    container_name: mongodbtest
    ports:
      - '27018:27018'
    networks:
      backend:
        aliases:
          - "mongodbtest"
  mysql:
    image: mysql:latest
    container_name: mysql_database
    restart: always
    ports:
      - 3307:3306
    volumes:
      - ./mysql-init/products-init.sql:/docker-entrypoint-initdb.d/products-init.sql
      - sql-db:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: team
    networks:
      backend:
        aliases:
          - "mysql"
  configserver:
    build: ./config-server
    image: configserver:latest
    container_name: configServer
    environment:
      PROFILE: "dev"
    ports:
      - "7071:7071"
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
    build: ./eureka-server
    image: eurekaserver:latest
    environment:
      CONFIGSERVER: configserver
      PROFILE: dev
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    container_name: eurekaServer
    ports:
      - "7070:7070"
    depends_on:
      - configserver
    networks:
      backend:
        aliases:
          - "eurekaserver"
  userservice:
    build: ./user-service
    image: user-service:latest
    container_name: user-service
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MONGODB_URI=mongodb://mongo:27017/nomosnow
      - configserver=configserver
      - eurekaserver=eurekaserver
      - axonserver=axonserver
      - mongodbtest=mongodbtest
      - CONFIGSERVER_PORT=7071
      - DATABASESERVER_PORT=27017
    depends_on:
      - axonserver
      - configserver
      - eurekaserver
      - mongo
    ports:
      - "5001:5001"
    networks:
      backend:
        aliases:
          - "users-service"
  productservice:
    build: ./product-service
    image: product-service:latest
    container_name: product-service
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - configserver=configserver
      - SPRING_PROFILES_ACTIVE=dev
      - CONFIGSERVER_URI=http://configserver:7071
      - eurekaserver=eurekaserver
      - axonserver=axonserver
      - CONFIGSERVER_PORT=7071
    depends_on:
      - axonserver
      - configserver
      - eurekaserver
      - mysql
    ports:
      - "5003:5003"
    networks:
      backend:
        aliases:
          - "product-service"
#  gatewayserver:
#    build: ./gateway-server
#    image: gatewayserver:latest
#    deploy:
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s
#    container_name: gatewayServer
#    ports:
#      - "7072:7072"
#    environment:
#      PROFILE: "dev"
#      SERVER_PORT: "7072"
#      LOGSTASH: logstash
#      ZIPKIN: zipkin
#      CONFIGSERVER: configserver
#      EUREKASERVER: eurekaserver
#      EUREKASERVER_PORT: "7070"
#      CONFIGSERVER_PORT: "7071"
#    depends_on:
#      - configserver
#      - eurekaserver
#    networks:
#      backend:
#        aliases:
#          - "gatewayserver"
#

networks:
  backend:
    driver: bridge
volumes:
  dbdata6:
  sql-db:
